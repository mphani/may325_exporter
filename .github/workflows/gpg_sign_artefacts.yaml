name: GPG sign rpm
on: 
  workflow_dispatch:
     inputs:
        release_tag_info:
          description: enter release tag number
          default: v1.1.1
          required: true
permissions:
  id-token: write
  actions: write
  contents: write
  
jobs:
  signing:
    #runs-on: ubuntu-latest
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@master
      - name: Install GPG
        run: sudo apt-get update && sudo apt-get install gnupg dpkg-sig dpkg-dev -y
      - name: setup GPG
        uses: aerospike/shared-workflows/devops/setup-gpg@feat/setup-gpg-composite
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-key-pass: ${{ secrets.GPG_PASS }}
          gpg-key-name: "phanitest"
      - name: Download DEB & RPM from Release “${{ github.event.inputs.tag }}”
        env:
          GH_TOKEN: ${{ github.token }}      
        run: |
          mkdir artefacts
          gh release download ${{ github.event.inputs.release_tag_info }} \
            --pattern '*.rpm' \
            --dir artefacts    
          echo
          gh release download ${{ github.event.inputs.release_tag_info }} \
            --pattern '*.deb' \
            --dir artefacts    
          echo
          echo listing downloaded artefacts
          echo
          ls -lrt artefacts/*
      - name: Sign RPM Package
        env:
          GPG_TTY: no-tty
          GPG_PASSPHRASE: ${{ secrets.GPG_PASS }}
          GH_TOKEN: ${{ github.token }}      
        run: |
          # sign a gpg
          echo
          echo signing-artefacts in artefacts folder
          files=$(find ./artefacts -type f -name "aerospike-prome*.rpm" -printf "$(realpath -s %p) ")
          for file in $files; do
               echo "gpg signing rpm -- $file"
               sha256sum $file > $file.sha256
               gpg --armour --detach-sign --no-tty --batch --yes --passphrase "$GPG_PASSPHRASE" $file.sha256
               # Sign the package
               # echo adding sign to rpm -- $file
               # rpm --addsign $file
          done            
          # gpg --detach-sign --no-tty --batch --yes --passphrase "$GPG_PASSPHRASE" artefacts/*.rpm
          echo
          echo list files in artefacts folder
          ls -lrt artefacts/*
          echo listing other files
          ls -lrt
      - name: Sign and check rpm # gpg sign and verify rpm packages
        env:
          GPG_TTY: /dev/null
          HOME: /home/runner
          GNUPGHOME: /home/runner/.gnupg
        run: |
          # Ensure environment variables are exported
          export HOME="${HOME}"
          export GNUPGHOME="${GNUPGHOME}"

          # Create symlink for gpg2 (required for rpm signing)
          #sudo ln -sf $(which gpg) /usr/bin/gpg2

          files=$(find ./artefacts -type f -name "aerospike-prome*.rpm" -printf "$(realpath -s %p) ")
          for file in $files; do
               echo "Checking gpg signing of rpm -- $file"
               # Verify the signature
               rpm --checksig $file
          done  
      - name: GPG sign deb # gpg sign and verify deb packages
        env:
          GPG_TTY: /dev/null
          HOME: /home/runner
          GNUPGHOME: /home/runner/.gnupg
        run: |
          # Ensure environment variables are exported
          export HOME="${HOME}"
          export GNUPGHOME="${GNUPGHOME}"

          files=$(find ./artefacts -type f -name "aerospike-prome*.deb" -printf "$(realpath -s %p) ")
          for file in $files; do
               echo "Checking gpg signing of DEB -- $file"
               sha256sum $file > $file.sha256
               gpg --armour --detach-sign --no-tty --batch --yes --passphrase "$GPG_PASSPHRASE" $file.sha256               
               # Sign the package
               #dpkg-sig --sign builder --gpg-options "--armour --batch --pinentry-mode loopback --passphrase '$GPG_PASSPHRASE'" $file.sha256
          done  
          
          #dpkg-sig --sign builder --gpg-options "--batch --pinentry-mode loopback --passphrase-file $GNUPGHOME/passphrase" tests/*.deb
          # Verify the signature
          #dpkg-sig --verify artefacts/*.deb
          echo 
          echo listing all files
          echo
          ls -lrt artefacts/*
          
      - name: Upload files to release-tag
        env:
          GH_TOKEN: ${{ github.token }}              
        run: |
          TAG_NAME=${{ github.event.inputs.release_tag_info }}   

           # List asset names, filter for .sha256 or .asc, then delete each
          for file in $(gh release view "$TAG_NAME" --json assets --jq '.assets[].name' \
                            | grep -E '\.sha256$|\.asc$'); do
            echo "removing file $file"
            gh release delete-asset "$TAG_NAME" "$file" -y
          done

          files=$(find ./artefacts -type f -name "aerospike-prome*.sha256*" -printf "$(realpath -s %p) ")
          for file in $files; do
             echo "uploading file $file"
             gh release upload "$TAG_NAME" "$file"             
          done 
